#nullable enable

Rixian.Extensions.Caching.CacheManager
Rixian.Extensions.Caching.CacheManager.CacheManager(Microsoft.Extensions.Caching.Memory.IMemoryCache! memoryCache, Microsoft.Extensions.Caching.Distributed.IDistributedCache! distributedCache) -> void
Rixian.Extensions.Caching.CacheManager.GetAsync<T>(string! key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Rixian.Extensions.Errors.Result<T>>!
Rixian.Extensions.Caching.CacheManager.GetOrSetAsync<T>(string! key, System.EntityCacheOptions! cacheOptions, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<Rixian.Extensions.Errors.Result<T>>!>! getValueAsync, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Rixian.Extensions.Errors.Result<T>>!
Rixian.Extensions.Caching.CacheManager.RefreshAsync(string! key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Rixian.Extensions.Caching.CacheManager.RemoveAsync(string! key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Rixian.Extensions.Caching.CacheManager.SetAsync<T>(string! key, T value, System.EntityCacheOptions? options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Rixian.Extensions.DependencyInjection.CachingServiceCollectionExtensions
static readonly Rixian.Extensions.Caching.CacheManager.CacheMissErrorCode -> string!
static readonly Rixian.Extensions.Caching.CacheManager.CacheUnknownValueErrorCode -> string!
static Rixian.Extensions.DependencyInjection.CachingServiceCollectionExtensions.AddManagedCaching(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
System.EntityCacheOptions
System.EntityCacheOptions.AbsoluteExpiration.get -> System.DateTimeOffset?
System.EntityCacheOptions.AbsoluteExpiration.set -> void
System.EntityCacheOptions.AbsoluteExpirationRelativeToNow.get -> System.TimeSpan?
System.EntityCacheOptions.AbsoluteExpirationRelativeToNow.set -> void
System.EntityCacheOptions.EntityCacheOptions() -> void
System.EntityCacheOptions.SlidingExpiration.get -> System.TimeSpan?
System.EntityCacheOptions.SlidingExpiration.set -> void